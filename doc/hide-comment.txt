*hide-comment* Hide comments
*HideComment*

MIT License Copyright (c) 2025 William Roy

==============================================================================

Features:
- Hide comment lines using Neovim's conceal feature with smart navigation.
- Automatic detection of comments using treesitter queries.
- Smart navigation that skips concealed comment lines and inline comments.
- Buffer-local and global configuration support.
- Customizable concealing level and refresh behavior.
- User commands for easy control.

Notes:
- Requires treesitter parser for the current buffer's filetype.
- Uses conceal feature which requires 'conceallevel' > 0.

# Setup ~

This module needs a setup with `require('hide-comment').setup({})` (replace
`{}` with your `config` table). It will create global Lua table `HideComment`
which you can use for scripting or manually (with `:lua HideComment.*`).

See |HideComment.config| for `config` structure and default values.

You can override runtime config settings locally to buffer inside
`vim.b.hidecomment_config` which should have same structure as
`HideComment.config`. See |nvim-buffer-local-config| for more details.

To stop module from showing non-error feedback, set `config.silent = true`.

# Disabling ~

To disable core functionality, set `vim.g.hidecomment_disable` (globally) or
`vim.b.hidecomment_disable` (for a buffer) to `true`. Considering high number
of different scenarios and customization intentions, writing exact rules
for disabling module's functionality is left to user. See
|nvim-disabling-recipes| for common recipes.

------------------------------------------------------------------------------
Class ~
{CommentNode}
Fields ~
{start_row} `(number)` 0-based line number
{start_col} `(number)` 0-based column number
{end_row} `(number)` 0-based line number
{end_col} `(number)` 0-based column number
{text} `(string)` The comment text content

------------------------------------------------------------------------------
Class ~
{ConcealedLine}
Fields ~
{row} `(number)` 0-based line number
{extmark_id} `(number)` The extmark ID for this concealed line
{original_text} `(string)` The original line content

------------------------------------------------------------------------------
Class ~
{NavigationDirection}
Fields ~
{down} `(number)`
{up} `(number)`

------------------------------------------------------------------------------
                                                             *HideComment.setup*
                              `HideComment.setup`
Module setup

Parameters ~
{config} `(table|nil)` Module config table. See |HideComment.config|.

Usage ~
>lua
  require('hide-comment').setup() -- use default config
  -- OR
  require('hide-comment').setup({}) -- replace {} with your config table
<
------------------------------------------------------------------------------
                                                            *HideComment.config*
                              `HideComment.config`
Module config

Default values:
>lua
  HideComment.config = {
    -- Whether to automatically enable for all supported languages
    auto_enable = false,

    -- Whether to enable smart navigation that skips concealed lines and inline comments
    smart_navigation = true,

    -- The conceallevel to set when concealing (0-3)
    conceal_level = 3,

    -- Refresh concealing when buffer content changes
    refresh_on_change = true,

    -- Whether to enable debug logging
    debug = false,

    -- Don't show non-error feedback
    silent = false,
  }
<
# Options ~

## Auto enable ~

`auto_enable` controls whether comment hiding is automatically enabled for
all supported filetypes (those with treesitter parsers). When `false`,
you need to manually call |HideComment.enable()| or use commands.

## Smart navigation ~

`smart_navigation` enables special j/k/h/l movement that skips over concealed
comment lines and inline comments. This prevents getting "stuck" on hidden
lines when navigating vertically or on concealed inline comments when
navigating horizontally.

## Conceal level ~

`conceal_level` sets the value of 'conceallevel' when comment hiding is active.
Must be between 0-3. Higher values provide more aggressive concealing.

## Refresh behavior ~

`refresh_on_change` automatically refreshes hidden comments when buffer
content changes. This ensures new comments are hidden and deleted comments
are no longer concealed.

## Debug mode ~

`debug` enables debug logging to help troubleshoot issues.

------------------------------------------------------------------------------
                                                                   *H.direction*
                                 `H.direction`
Type ~
`(NavigationDirection)` The navigation directions

------------------------------------------------------------------------------
                                                               *H.comment_query*
                               `H.comment_query`
Type ~
`(string)` The universal treesitter query for comments

------------------------------------------------------------------------------
                                                           *H.concealed_buffers*
                             `H.concealed_buffers`
Type ~
`(table<number, ConcealedLine[]>)` Track concealed lines per buffer

------------------------------------------------------------------------------
                                                                *H.namespace_id*
                                `H.namespace_id`
Type ~
`(number)` The namespace for concealing extmarks

------------------------------------------------------------------------------
                                                                  *H.augroup_id*
                                 `H.augroup_id`
Type ~
`(number)` Augroup ID for autocommands

------------------------------------------------------------------------------
                                                                   *H.debug_log*
                                 `H.debug_log`
Parameters ~
{message} `(string)`
{level} `(optional)` `(number)` vim.log.levels

------------------------------------------------------------------------------
                                                                      *H.notify*
                                   `H.notify`
Parameters ~
{msg} `(string)`
{level} `(optional)` `(number)`

------------------------------------------------------------------------------
                                                             *H.validate_buffer*
                              `H.validate_buffer`
Parameters ~
{bufnr} `(number)`
Return ~
`(boolean)` is_valid
Return ~
`(string)` `(optional)` error_message

------------------------------------------------------------------------------
                                                       *H.get_treesitter_parser*
                           `H.get_treesitter_parser`
Parameters ~
{bufnr} `(number)`
Return ~
`(any)` `(optional)` parser
Return ~
`(string)` `(optional)` error_message

------------------------------------------------------------------------------
                                                           *H.get_comment_nodes*
                             `H.get_comment_nodes`
Parameters ~
{bufnr} `(number)`
Return ~
`(CommentNode[])` nodes
Return ~
`(string)` `(optional)` error_message

------------------------------------------------------------------------------
                                                        *H.is_full_line_comment*
                            `H.is_full_line_comment`
Parameters ~
{bufnr} `(number)`
{node} `(CommentNode)`
{row} `(number)`
Return ~
`(boolean)` is_full_line_comment

------------------------------------------------------------------------------
                                                  *H.create_concealing_extmarks*
                         `H.create_concealing_extmarks`
Parameters ~
{bufnr} `(number)`
{nodes} `(CommentNode[])`
Return ~
`(ConcealedLine[])`

------------------------------------------------------------------------------
                                                            *H.apply_concealing*
                              `H.apply_concealing`
Parameters ~
{bufnr} `(number)`
Return ~
`(boolean)` success
Return ~
`(string)` `(optional)` error_message

------------------------------------------------------------------------------
                                                           *H.remove_concealing*
                             `H.remove_concealing`
Parameters ~
{bufnr} `(number)`
Return ~
`(boolean)` success
Return ~
`(string)` `(optional)` error_message

------------------------------------------------------------------------------
                                                           *H.is_line_concealed*
                             `H.is_line_concealed`
Parameters ~
{bufnr} `(number)`
{line_nr} `(number)` 1-based line number
Return ~
`(boolean)` is_concealed

------------------------------------------------------------------------------
                                                      *H.find_next_visible_line*
                           `H.find_next_visible_line`
Parameters ~
{bufnr} `(number)`
{current_line} `(number)` 1-based line number
{direction} `(number)` H.direction.down or H.direction.up
Return ~
`(number)` next_line

------------------------------------------------------------------------------
                                                       *H.is_position_concealed*
                           `H.is_position_concealed`
Parameters ~
{bufnr} `(number)`
{line_nr} `(number)` 1-based line number
{col_nr} `(number)` 0-based column number
Return ~
`(boolean)` is_in_concealed_region

------------------------------------------------------------------------------
                                                    *H.find_next_visible_column*
                          `H.find_next_visible_column`
Parameters ~
{bufnr} `(number)`
{line_nr} `(number)` 1-based line number
{col_nr} `(number)` 0-based column number
{direction} `(number)` 1 for right, -1 for left
Return ~
`(number)` next_col

------------------------------------------------------------------------------
                                                   *H.smart_navigate_horizontal*
                         `H.smart_navigate_horizontal`
Parameters ~
{direction} `(number)` 1 for right, -1 for left
{count} `(number)` Number of moves to make

------------------------------------------------------------------------------
                                                              *H.smart_navigate*
                               `H.smart_navigate`
Parameters ~
{direction} `(number)` H.direction.down or H.direction.up
{count} `(number)` Number of moves to make

------------------------------------------------------------------------------
                                                            *HideComment.enable*
                              `HideComment.enable`
Enable comment hiding for a buffer

Parameters ~
{bufnr} `(optional)` `(number)` Buffer handle (defaults to current buffer)
Return ~
`(boolean)` success
Return ~
`(string)` `(optional)` error_message

Usage ~
>lua
  -- Hide comments in current buffer
  HideComment.enable()

  -- Hide comments in specific buffer
  HideComment.enable(5)
<
------------------------------------------------------------------------------
                                                           *HideComment.disable*
                             `HideComment.disable`
Disable comment hiding for a buffer

Parameters ~
{bufnr} `(optional)` `(number)` Buffer handle (defaults to current buffer)
Return ~
`(boolean)` success
Return ~
`(string)` `(optional)` error_message

Usage ~
>lua
  -- Show comments in current buffer
  HideComment.disable()

  -- Show comments in specific buffer
  HideComment.disable(5)
<
------------------------------------------------------------------------------
                                                            *HideComment.toggle*
                              `HideComment.toggle`
Toggle comment hiding for a buffer

Parameters ~
{bufnr} `(optional)` `(number)` Buffer handle (defaults to current buffer)
Return ~
`(boolean)` success
Return ~
`(string)` `(optional)` error_message

Usage ~
>lua
  -- Toggle comment hiding in current buffer
  HideComment.toggle()

  -- Toggle comment hiding in specific buffer
  HideComment.toggle(5)
<
------------------------------------------------------------------------------
                                                        *HideComment.is_enabled*
                            `HideComment.is_enabled`
Check if comment hiding is enabled for a buffer

Parameters ~
{bufnr} `(optional)` `(number)` Buffer handle (defaults to current buffer)
Return ~
`(boolean)` is_enabled

Usage ~
>lua
  if HideComment.is_enabled() then
    print("Comments are hidden")
  end
<
------------------------------------------------------------------------------
                                                         *HideComment.get_stats*
                            `HideComment.get_stats`
Get hiding statistics for a buffer

Parameters ~
{bufnr} `(optional)` `(number)` Buffer handle (defaults to current buffer)
Return ~
`(table)` stats Statistics object with concealed line count and other info

Usage ~
>lua
  local stats = HideComment.get_stats()
  print(string.format("Hidden %d/%d lines (%.1f%%)",
    stats.concealed_lines, stats.total_lines, stats.concealed_percentage))
<

 vim:tw=78:ts=8:noet:ft=help:norl: